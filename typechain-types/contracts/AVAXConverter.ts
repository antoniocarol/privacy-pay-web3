/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AVAXConverterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "nullifiers"
      | "privateTransfer"
      | "relayer"
      | "setRelayer"
      | "shield"
      | "unshield"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PrivateTransfer" | "Shield" | "Unshield"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "privateTransfer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shield", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "unshield",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unshield", data: BytesLike): Result;
}

export namespace PrivateTransferEvent {
  export type InputTuple = [nullifier: BytesLike, newCommitment: BytesLike];
  export type OutputTuple = [nullifier: string, newCommitment: string];
  export interface OutputObject {
    nullifier: string;
    newCommitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShieldEvent {
  export type InputTuple = [commitment: BytesLike, amount: BigNumberish];
  export type OutputTuple = [commitment: string, amount: bigint];
  export interface OutputObject {
    commitment: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnshieldEvent {
  export type InputTuple = [
    nullifier: BytesLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [nullifier: string, to: string, amount: bigint];
  export interface OutputObject {
    nullifier: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AVAXConverter extends BaseContract {
  connect(runner?: ContractRunner | null): AVAXConverter;
  waitForDeployment(): Promise<this>;

  interface: AVAXConverterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  nullifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  privateTransfer: TypedContractMethod<
    [nullifier: BytesLike, newCommitment: BytesLike],
    [void],
    "nonpayable"
  >;

  relayer: TypedContractMethod<[], [string], "view">;

  setRelayer: TypedContractMethod<
    [_relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  shield: TypedContractMethod<[commitment: BytesLike], [void], "payable">;

  unshield: TypedContractMethod<
    [nullifier: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "privateTransfer"
  ): TypedContractMethod<
    [nullifier: BytesLike, newCommitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRelayer"
  ): TypedContractMethod<[_relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shield"
  ): TypedContractMethod<[commitment: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "unshield"
  ): TypedContractMethod<
    [nullifier: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PrivateTransfer"
  ): TypedContractEvent<
    PrivateTransferEvent.InputTuple,
    PrivateTransferEvent.OutputTuple,
    PrivateTransferEvent.OutputObject
  >;
  getEvent(
    key: "Shield"
  ): TypedContractEvent<
    ShieldEvent.InputTuple,
    ShieldEvent.OutputTuple,
    ShieldEvent.OutputObject
  >;
  getEvent(
    key: "Unshield"
  ): TypedContractEvent<
    UnshieldEvent.InputTuple,
    UnshieldEvent.OutputTuple,
    UnshieldEvent.OutputObject
  >;

  filters: {
    "PrivateTransfer(bytes32,bytes32)": TypedContractEvent<
      PrivateTransferEvent.InputTuple,
      PrivateTransferEvent.OutputTuple,
      PrivateTransferEvent.OutputObject
    >;
    PrivateTransfer: TypedContractEvent<
      PrivateTransferEvent.InputTuple,
      PrivateTransferEvent.OutputTuple,
      PrivateTransferEvent.OutputObject
    >;

    "Shield(bytes32,uint256)": TypedContractEvent<
      ShieldEvent.InputTuple,
      ShieldEvent.OutputTuple,
      ShieldEvent.OutputObject
    >;
    Shield: TypedContractEvent<
      ShieldEvent.InputTuple,
      ShieldEvent.OutputTuple,
      ShieldEvent.OutputObject
    >;

    "Unshield(bytes32,address,uint256)": TypedContractEvent<
      UnshieldEvent.InputTuple,
      UnshieldEvent.OutputTuple,
      UnshieldEvent.OutputObject
    >;
    Unshield: TypedContractEvent<
      UnshieldEvent.InputTuple,
      UnshieldEvent.OutputTuple,
      UnshieldEvent.OutputObject
    >;
  };
}
